=== ./actions/auth.ts ===
"use server";

import {signIn, signOut} from "@/auth";
import {db} from "@/db";
import {AuthError} from "next-auth";
import {revalidatePath} from "next/cache";
import {LoginFormSchema} from "@/lib/types";

const getUserByEmail = async (email: string) => {
	try {
		return await db.user.findUnique({
			where: {
				email,
			},
		});
	} catch (error) {
		console.log(error);
		return null;
	}
};

export const login = async (provider: string) => {
	await signIn(provider, {redirectTo: "/"});
	revalidatePath("/");
};

export const logout = async () => {
	await signOut({redirectTo: "/"});
	revalidatePath("/");
};

export const loginWithCreds = async (formData: unknown) => {

	const result = LoginFormSchema.safeParse(formData);

	if (!result.success) {
		let errorMessage = "";

		result.error.issues.forEach((issue) => {
			errorMessage += issue.message + " " + issue.path.join(" ") + " ";

		})

		return {error: errorMessage};

	}


	const existingUser = await getUserByEmail(result.data.email);
	console.log(existingUser);

	try {
		await signIn("credentials",
			{
				...result.data,
				redirectTo: "/"
			});
		/* eslint-disable-next-line @typescript-eslint/no-explicit-any */
	} catch (error: any) {
		if (error instanceof AuthError) {
			switch (error.type) {
				case "CredentialsSignin":
					return {error: "Invalid credentials!"};
				default:
					return {error: "Something went wrong!"};
			}
		}

		throw error;
	}
	revalidatePath("/");
};

=== ./actions/users.ts ===
import {db} from "@/db";


export async function getAllUsers() {
	return await db.user.findMany();
}
=== ./app/api/auth/[...nextauth]/route.ts ===
export { GET, POST } from "@/auth";

=== ./app/layout.tsx ===
import { auth } from "@/auth";
import Navbar from "@/components/layout/Navbar";
import type { Metadata } from "next";
import { SessionProvider } from "next-auth/react";
import { Geist, Geist_Mono } from "next/font/google";
import { ReactNode } from "react";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: ReactNode;
}>) {
  const session = await auth();

  return (
    <SessionProvider session={session}>
      <html lang="en">
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >
          {/* <Providers> */}

          <div className="mx-auto max-w-screen-lg h-screen flex flex-col">
            <Navbar />
            <div className="flex-grow">{children}</div>
          </div>
          {/* </Providers> */}
        </body>
      </html>
    </SessionProvider>
  );
}

=== ./app/page.tsx ===
export default async function Home() {


	return (
		<main className="m-auto">
			<h1 className="text-3xl">Landing page</h1>

			{/*<ListOfUsers/>*/}
		</main>
	);
}

=== ./auth.ts ===
import { PrismaAdapter } from "@auth/prisma-adapter";
import bcrypt from "bcryptjs";
import NextAuth from "next-auth";
import Credentials from "next-auth/providers/credentials";

import { db } from "./db";
import { saltAndHashPassword } from "./utils/helper";

export const {
	handlers: { GET, POST },
	signIn,
	signOut,
	auth,
} = NextAuth({
	adapter: PrismaAdapter(db),
	session: { strategy: "jwt" },
	providers: [
		Credentials({
			name: "Credentials",
			credentials: {
				email: {
					label: "Email",
					type: "email",
					placeholder: "email@example.com",
				},
				password: { label: "Password", type: "password" },
			},
			authorize: async (credentials) => {
				if (!credentials || !credentials.email || !credentials.password) {
					return null;
				}

				const email = credentials.email as string;
				// eslint-disable-next-line @typescript-eslint/ban-ts-comment
				// @ts-expect-error
				const hash = saltAndHashPassword(credentials.password);

				/* eslint-disable-next-line @typescript-eslint/no-explicit-any */
				let user: any = await db.user.findUnique({
					where: {
						email,
					},
				});

				if (!user) {
					user = await db.user.create({
						data: {
							email,
							hashedPassword: hash,
						},
					});
				} else {
					const isMatch = bcrypt.compareSync(
						credentials.password as string,
						user.hashedPassword
					);
					if (!isMatch) {
						throw new Error("Incorrect password.");
					}
				}

				return user;
			},
		}),
	],
});

=== ./components/AuthButton.tsx ===
import React from "react";
import { useFormStatus } from "react-dom";

const AuthButton = () => {
  const { pending } = useFormStatus();
  return (
    <button
      disabled={pending}
      type="submit"
      className={`${
        pending ? "bg-gray-600" : "bg-blue-600"
      } rounded-md w-full px-12 py-3 text-sm font-medium text-white`}
    >
      {pending ? "Loading..." : "Sign in"}
    </button>
  );
};

export default AuthButton;


const Navbar = () => {
  return <div>Navbar</div>;
};

export default Navbar;

=== ./components/layout/Providers.tsx ===
"use client";

import { ReactNode } from "react";
import { ThemeProvider } from "./ThemeProvider";

export function Providers({ children }: { children: ReactNode }) {
  return (
    <ThemeProvider>
      {children}
      {/* <Toaster/> */}
    </ThemeProvider>
  );
}

=== ./components/layout/ThemeProvider.tsx ===
'use client'

import { createContext, useContext, useEffect, useState } from 'react'
import {Button} from "@/components/ui/button";

type Theme = 'dark' | 'light'

const ThemeContext = createContext({
	theme: 'light' as Theme,
	toggleTheme: () => {},
})

export function ThemeProvider({ children }: { children: React.ReactNode }) {
	const [theme, setTheme] = useState<Theme>('light')

	useEffect(() => {
		const savedTheme = localStorage.getItem('theme') as Theme
		if (savedTheme) {
			setTheme(savedTheme)
			document.documentElement.classList.toggle('dark', savedTheme === 'dark')
		}
	}, [])

	const toggleTheme = () => {
		const newTheme = theme === 'light' ? 'dark' : 'light'
		setTheme(newTheme)
		localStorage.setItem('theme', newTheme)
		document.documentElement.classList.toggle('dark', newTheme === 'dark')
	}

	return (
		<ThemeContext.Provider value={{ theme, toggleTheme }}>
			{children}
		</ThemeContext.Provider>
	)
}

export const useTheme = () => useContext(ThemeContext)



export function ThemeToggle() {
	const { theme, toggleTheme } = useTheme();

	return (
		<Button variant="secondary" onClick={toggleTheme}>
			{theme === 'light' ? 'ðŸŒž' : 'ðŸŒœ'}
		</Button>
	);
}


=== ./components/LoginForm.tsx ===
'use client';

import React, {useState, useEffect} from "react";
import AuthButton from "./AuthButton";
import {loginWithCreds} from "@/actions/auth";
import {LoginFormSchema} from "@/lib/types";
import {toast} from "@/hooks/use-toast";

const LoginForm = () => {
	const [emailError, setEmailError] = useState<string | null>(null);
	const [passwordError, setPasswordError] = useState<string | null>(null);

	const loginAction = async (formData: FormData) => {
		const newUser = {
			email: formData.get("email") as string,
			password: formData.get("password") as string,
		};

		const result = LoginFormSchema.safeParse(newUser);

		if (!result.success) {
			const formattedErrors = result.error.format();
			setEmailError(formattedErrors.email?._errors.join(", ") || null);
			setPasswordError(formattedErrors.password?._errors.join(", ") || null);
			return;
		}
		setEmailError(null);
		setPasswordError(null);

		const response = await loginWithCreds(result.data);
		if (response?.error) {
			toast({
				variant: "destructive",
				title: "Error while signing in",
				description: response.error,
			})
		}
	};

	useEffect(() => {
		const clearErrors = () => {
			setEmailError(null);
			setPasswordError(null);
		};

		const emailInput = document.getElementById("email");
		const passwordInput = document.getElementById("password");

		emailInput?.addEventListener("input", clearErrors);
		passwordInput?.addEventListener("input", clearErrors);

		return () => {
			emailInput?.removeEventListener("input", clearErrors);
			passwordInput?.removeEventListener("input", clearErrors);
		};
	}, []);

	return (
		<div>
			<form action={loginAction} className="w-full flex flex-col gap-4">
				<div>
					<label htmlFor="email" className="block text-sm font-medium text-gray-200">
						Email
					</label>
					<input
						type="email"
						placeholder="Email"
						id="email"
						name="email"
						className="mt-1 w-full px-4 p-2 h-10 rounded-md border border-gray-200 bg-white text-sm text-gray-700"
					/>
					{emailError && (
						<p className="mt-1 text-xs text-red-500">{emailError}</p>
					)}
				</div>
				<div>
					<label htmlFor="password" className="block text-sm font-medium text-gray-200">
						Password
					</label>
					<input
						type="password"
						placeholder="Password"
						name="password"
						id="password"
						className="mt-1 w-full px-4 p-2 h-10 rounded-md border border-gray-200 bg-white text-sm text-gray-700"
					/>
					{passwordError && (
						<p className="mt-1 text-xs text-red-500">{passwordError}</p>
					)}
				</div>
				<div className="mt-4">
					<AuthButton/>
				</div>
			</form>
		</div>
	);
};

export default LoginForm;


=== ./components/Logout.tsx ===
"use client";
import { logout } from "@/actions/auth";

const Logout = () => {
  return (
    <div onClick={() => logout()}>
      <div className="bg-gray-600 text-white text-sm px-4 py-2 rounded-md cursor-pointer">
        logout
      </div>
    </div>
  );
};

export default Logout;


=== ./db.ts ===
import { PrismaClient } from "@prisma/client";

declare global {
  /* eslint-disable-next-line no-var */
  var prisma: PrismaClient | undefined;
}

export const db = global.prisma || new PrismaClient();

if (process.env.NODE_ENV !== "production") global.prisma = db;

=== ./hooks/use-toast.ts ===
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

=== ./lib/types.ts ===

import { z } from 'zod';
export const SignupFormSchema = z.object({
    name: z
        .string()
        .trim()
        .min(2, { message: 'Name must be at least 2 characters long.' }),
    email: z.string().trim().email({ message: 'Please enter a valid email.' }),
    password: z
        .string()
        // .min(8, { message: 'Be at least 8 characters long' })
        // .regex(/[a-zA-Z]/, { message: 'Contain at least one letter.' })
        // .regex(/[0-9]/, { message: 'Contain at least one number.' })
        // .regex(/[^a-zA-Z0-9]/, {
        //   message: 'Contain at least one special character.',
        // })
        .trim(),
});
export type SignupFormValues = z.infer<typeof SignupFormSchema>;
export const LoginFormSchema = z.object({
    email: z.string().trim().email({ message: 'Please enter a valid email.' }),
    password: z.string().min(1, { message: 'Password field must not be empty.' }),
});

export type FormState =
    | {
    errors?: {
        name?: string[];
        email?: string[];
        password?: string[];
    };
    message?: string;
}
    | undefined;

export type SessionPayload = {
    userId: string | number;
    role: 'user' | 'admin';
    expiresAt: Date;
};

=== ./lib/utils.ts ===
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

=== ./middleware.ts ===
import { auth } from "@/auth";
import type { NextRequest } from "next/server";
import { NextResponse } from "next/server";

const protectedRoutes = ["/dashboard"];

export default async function middleware(request: NextRequest) {
  const session = await auth();

  const isProtected = protectedRoutes.some((route) =>
    request.nextUrl.pathname.startsWith(route)
  );

  if (!session && isProtected) {
    const absoluteURL = new URL("/", request.nextUrl.origin);
    return NextResponse.redirect(absoluteURL.toString());
  }

  return NextResponse.next();
}

export const config = {
  matcher: ["/((?!api|_next/static|_next/image|favicon.ico).*)"],
};

=== ./utils/helper.ts ===
import bcrypt from "bcryptjs";

export function saltAndHashPassword(password: string) {
  const saltRounds = 10; // Adjust the cost factor according to your security requirements
  const salt = bcrypt.genSaltSync(saltRounds); // Synchronously generate a salt
   // Synchronously hash the password
  return bcrypt.hashSync(password, salt); // Return the hash directly as a string
}
