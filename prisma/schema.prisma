generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum UserRole {
    SUPER_ADMIN
    ADMIN
    MEMBER
    NONE
}

enum UserStatus {
    PENDING
    APPROVED
    REJECTED
    BLOCKED
}

enum BloodGroup {
    A_POSITIVE
    A_NEGATIVE
    B_POSITIVE
    B_NEGATIVE
    O_POSITIVE
    O_NEGATIVE
    AB_POSITIVE
    AB_NEGATIVE
}

model User {
    id             String          @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    email          String          @unique
    hashedPassword String
    role           UserRole        @default(NONE)
    status         UserStatus      @default(PENDING)
    bloodDonor     BloodDonor?
    image          String?
    passwordResets PasswordReset[]
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
}

model AuthAttempt {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    userId     String   @db.ObjectId
    email      String
    ipAddress  String?
    userAgent  String?
    successful Boolean
    createdAt  DateTime @default(now())

    @@index([email, createdAt])
    @@index([userId, createdAt])
}

model PasswordReset {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    token     String   @unique
    expires   DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model BloodDonor {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    userId        String        @unique @db.ObjectId
    user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    bloodGroup    BloodGroup
    contactNumber String
    isAvailable   Boolean       @default(true)
    donationCount Int           @default(0)
    exchangeCount Int           @default(0)
    bloodRecords  BloodRecord[]
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
}

model BloodRecord {
    id          String     @id @default(auto()) @map("_id") @db.ObjectId
    donorId     String     @db.ObjectId
    donor       BloodDonor @relation(fields: [donorId], references: [id], onDelete: Cascade)
    recordType  String // "DONATION" or "EXCHANGE"
    date        DateTime
    description String?
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
}

model BloodInventory {
    id         String     @id @default(auto()) @map("_id") @db.ObjectId
    bloodGroup BloodGroup
    count      Int        @default(0)
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
}

model Activity {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    description String
    location    String
    date        DateTime
    coverImage  String
    images      String[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Service {
    id        String          @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    price     Float
    type      String // "BASIC", "VACCINATION", "BLOOD_PURCHASE"
    records   ServiceRecord[]
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt
}

model ServiceRecord {
    id                String             @id @default(auto()) @map("_id") @db.ObjectId
    serviceId         String             @db.ObjectId
    service           Service            @relation(fields: [serviceId], references: [id], onDelete: Cascade)
    name              String
    number            String
    address           String
    vaccineInfo       VaccineInfo?
    bloodPurchaseInfo BloodPurchaseInfo?
    timestamp         DateTime           @default(now())
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
}

model VaccineInfo {
    id              String        @id @default(auto()) @map("_id") @db.ObjectId
    serviceRecordId String        @unique @db.ObjectId
    serviceRecord   ServiceRecord @relation(fields: [serviceRecordId], references: [id], onDelete: Cascade)
    vaccineName     String
    doseNumber      Int
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
}

model BloodPurchaseInfo {
    id              String        @id @default(auto()) @map("_id") @db.ObjectId
    serviceRecordId String        @unique @db.ObjectId
    serviceRecord   ServiceRecord @relation(fields: [serviceRecordId], references: [id], onDelete: Cascade)
    bloodGroup      BloodGroup
    numberOfBags    Int
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
}
